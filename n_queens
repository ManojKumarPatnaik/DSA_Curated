class Solution{
    public List<List<String>> solveNQueen(int n){
        List<List<String>>  res = new ArrayList<>();
        if(n<1) return res;
        char[][] board = new char[n][n];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                board[i][j] = ".";
            }
        }
        solve(board, n, 0, res);
        return res;
    }

    public boolean solve(char[][] board, int n, int col, List<List<Integer>> res){
        if(col == n){ // base condition to add the list to board
            List<String> list = new ArrayList<>();
            for(int i=0; i<n; i++){
                list.add(String.valueOf(board[i]));
            }
            res.add(list);
            return false; //return false for backtracking
        }

        for(int i=0; i<N; i++){
            if(isSafe(board,n, i, col)){
                board[i][col] = 'Q';
                if(solve(board, n, col+1, res)) return true;
                else board[i][col] = '.';   //backtrack
            }
        }
        return false;
    }

    private boolean isSafe(char[][] board, int n, int row, int col){
        for(int i=0; i<n; i++){
            if(board[row][i] != ".") return false;
            if(board[i][col] != ".") return false;
        }
        int step = 1;
        while(row-step>=0 && col-step>=0)
            if(board[row-step][col-step++]!='.') return false;
        step = 1;
        while(row+step<N && col-step>=0)
            if(board[row+step][col-step++]!='.') return false;
        return true;
    }

}