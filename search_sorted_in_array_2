class Solution {
    public boolean search(int[] nums, int target) {
        // for(int i=0; i<nums.length; i++){
        //     if(nums[i] == target){
        //         return true;
        //     }
        // }
        // return false;
        
        /*The idea is to find the pivot element because till there it will be increasing and after,
        that it will have a value such that nums[i] < nums[i-1] so we divide the array in two parts and pass them individually,
        in a binary search function*/
        
             int i = 0 ; 
       int j = nums.length - 1 ;
        if(target == nums[0] )
            return true ;
        
        while(j < nums.length && j >= i){
            
            //skip duplicates from left
            while( i < nums.length-1 && nums[i] == nums[i+1] )
                i++ ;
            
            //skip duplicates from right
            while(j > 0 && nums[j] == nums[j-1] )
                j -- ;
        
            int mid = i + (j-i)/2 ;
            if(target == nums[mid] )
                return true ;
            
            
            //we are in left array
            if(nums[0] <= nums[mid] ){
                //if target also belong to left array
                if(target >= nums[0] && target < nums[mid] )
                        j = mid - 1 ;
                else
                    i = mid + 1 ;
            }else{  // if we are in right array 
                 if(target <= nums[nums.length - 1] && target > nums[mid] )
                     i = mid + 1 ;
                else
                    j = mid - 1 ;
            }
            
        } 
        
        return false ;  
    }
}