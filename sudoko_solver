// class Solution{
//     public void solveSudoku(char[][] board){
//         solve(board);
//     }

//     public boolean solve(char[][] board){
//         for(int i=0; i<board.length; i++){
//             for(int j=0; j<board[0].length; j++){
//                 if(board[i][j] == '.'){
//                     for(char c='1'; c<='9'; c++){
//                         if(isValid(board,i,j,c)){
//                             board[i][j] = c;
//                             if(solve(board)) return true;
//                             else board[i][j] = '.';
//                         }
//                     }
//                     return false;
//                 }
//             }
//         }
//         return true;
//     }

//     public boolean isValid(char[][] board, int row, int col, char c){
//         for(int i=1; i<=9; i++){
//             if(board[row][i] == c) return false;
//             if(board[i][col] == c) return false;
//             if(board[3*(row/3)+i/3][3*(col/3)+i%3] != '.' && board[3*(row/3)+i/3][3*(col/3)+i%3] == 'c') return false;
//         }
//         return true;
//     }
// }


class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);   
    }
    
    public boolean solve(char[][] board){
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(board[i][j] == '.'){
                    for(char c = '1'; c<='9'; c++){
                    if(isValid(board, i, j, c)){
                        board[i][j] = c; //If it is valid we add it to board and call the solve function again for next col
                        
                        if(solve(board)){ // If we ge the solution we return true
                            return true;
                        } else {
                            board[i][j] = '.'; // If we don't get the solution we remove the added character
                        }
                       
                    }
                }
                return false;
                }
            }
        }
        return true;
    }
    
    public boolean isValid(char[][] board, int row, int col, char c){
        for(int i=0; i<9; i++){
            if(board[row][i] == c) return false;
            if(board[i][col] == c) return false;
            if(board[3*(row/3) + i/3][3*(col/3) + i%3] != '.' && board[3*(row/3) + i/3][3*(col/3)+i%3] == c) return false; //check 3*3 block
        }
        return true;
        }
    }