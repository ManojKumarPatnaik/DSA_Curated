class Solution {
    public int coinChange(int[] coins, int amount) {
        int dp[] = new int[amount+1];
		Arrays.fill(dp, -1);
		dp[0] = 0;
		
		int ans = dpCoins(amount, coins, dp);
		if(ans == Integer.MAX_VALUE) {
				return -1;
		} else return ans;
    }
    static int dpCoins(int n, int a[], int dp[]) {
		
		if(n == 0) return 0;
		
		int ans = Integer.MAX_VALUE;
		
		for(int i = 0; i<a.length; i++) {
			if(n-a[i] >= 0) {
				int subAns = 0;
				if(dp[n-a[i]] != -1) {
					subAns = dp[n-a[i]];
				} else {
					subAns = dpCoins(n-a[i], a, dp);
				}
				if(subAns != Integer.MAX_VALUE && 
						subAns + 1 < ans) {
					ans = subAns + 1;
				}
			}
		}
		return dp[n] = ans;
	}
}