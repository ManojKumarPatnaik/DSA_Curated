//Recursive Solution
Class Solution{
    public static int countPaths(int i, int j, int n, int m){
        if(i == (n-1) && j==(m-1)) return 1;
        if(i>=n || j>=m) return 0;
        else return countPaths(i+1, j) + countPaths(i, j+1);
    }
}

//DP Solution
Class Solution{
    public static int countPaths(int i, int j, int n, int m, int List<List<Integer>> &dp){
        if(i == (n-1) && j==(m-1)) return 1;
        if(i>=n || j>=m) return 0;

        if(dp[i][j] != -1) return dp[i][j]
        else return dp[i][j] countPaths(i+1, j,dp) + countPaths(i, j+1,dp);
    }
}

//DP Solution Submitted on LeetCode
Class Solution{
    public int uniquePaths(int m, int n){
        int[][] dp = new int[m][n];

        for(int i=0; i<n; i++){
            dp[0][i] = 1;
        }

        for(int i=0; i<m; i++){
            dp[1][0] = 1;
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                dp[i][j] = dp[i][j-1] + dp[i-1][j];
            }
        }
        return dp[m-1][n-1];
    }
}